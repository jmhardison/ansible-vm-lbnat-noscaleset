---
# This file is for removing a VM from a subscription that has already been deployed.
# Use of this script implies a user executing the session, it was not designed around a headless execution workflow.
- name: Remove Existing VM
  hosts: localhost
  connection: local
  gather_facts: no
  serial: 1

# Ask the user questions to help mutate the resulting machine details.
  vars_prompt:

    - name: user_first_in
      prompt: "What is the users first name?"
      private: no
    
# Include the vars file to answer remainder of consistent items
  vars_files:
      - var_holder.yml

# uncomment the following if you have access to multiple subscriptions and see your deployments landing on an unexpected subscription.  
  #environment:
  #  AZURE_SUBSCRIPTION_ID: "{{subscription_id}}"


  tasks:

  # Uncomment the below if you want to have the script set the default az client subscription, just in case. Comment out if not.
    # You can also add client_id, secret, tenant_id, and subscription_id to each method or environment variables to use a service principal.
    # setting the environment variable, this is probably not needed but will leave for now.
    - name: Azure CLI Set Active Subscription
      command: az account set --subscription "{{subscription_id}}"
    #

    - name: Lowercase User name
      set_fact:
        user_first: "{{user_first_in|lower}}"
      when: user_first_in is defined

    - name: Gather facts for load balancer
      azure_rm_loadbalancer_info:
        name: "{{ name_prefix }}lb1"
        resource_group: "{{ resource_group_name }}"
      register: lb_facts


    - name: Remove an existing VM - "{{ (name_prefix + user_first)[:15] }}"
      azure_rm_virtualmachine:
        resource_group: "{{ resource_group_name }}"
        name: "{{ (name_prefix + user_first)[:15] }}"
        state: absent
      register: vm_facts
    
    - name: Remove existing network interface - "{{ name_prefix }}{{ user_first }}nic"
      azure_rm_networkinterface:
        name: "{{ name_prefix }}{{ user_first }}nic"
        resource_group: "{{ resource_group_name }}"
        state: absent

    - name: Remove security group - "{{ name_prefix }}{{ user_first }}nsg"
      azure_rm_securitygroup:   
        resource_group: "{{ resource_group_name }}"
        name: "{{ name_prefix }}{{ user_first }}nsg"
        state: absent

    

    

    - name: Build and Update LB Inbound nat Rules
      set_fact:
        lb_nat_rules: "{{ lb_nat_rules|default([]) + [{'name': item.name, 'backend_port': item.properties.backendPort, 'frontend_ip_configuration': name_prefix + 'frontendipconf1', 'frontend_port': item.properties.frontendPort, 'protocol': item.properties.protocol}] }}"
      with_items: "{{lb_facts.ansible_info.azure_loadbalancers.0.properties.inboundNatRules }}"
      when: item.name != "nat{{ user_first }}"


    - name: Update load balancer with NAT rule
      azure_rm_loadbalancer:
        resource_group: "{{ resource_group_name }}"
        name: "{{ name_prefix }}lb1"
        inbound_nat_rules: "{{ lb_nat_rules }}"
      when: lb_nat_rules is defined


    # - name: Update load balancer with NAT rule removed for last in list
    #   azure_rm_loadbalancer:
    #     resource_group: "{{ resource_group_name }}"
    #     name: "{{ name_prefix }}lb1"
    #     inbound_nat_rules: []
    #   when: lb_nat_rules is undefined

# current modules do not appear to fully remove the last rule, temp using azure cli
    - name: Azure CLI Remove Last Inbound NAT Rule - Temp
      command: >
        az network lb inbound-nat-rule delete 
        --resource-group "{{ resource_group_name }}" 
        --lb-name "{{ name_prefix }}lb1" 
        --name "nat{{ user_first }}" 
        --subscription "{{subscription_id}}"
